#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [path]"

  opts.on("-h", "--help", "Displays this help info") do
    puts opts
    exit 0
  end

  begin
    opts.parse!(ARGV)
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end

if ARGV.empty?
  abort "Please specify the directory to didify, e.g. `#{File.basename($0)} .'"
elsif !File.exists?(ARGV.first)
  abort "`#{ARGV.first}' does not exist."
elsif !File.directory?(ARGV.first)
  abort "`#{ARGV.first}' is not a directory."
elsif ARGV.length > 1
  abort "Too many arguments; please specify only the directory to didify."
end

def unindent(string)
  indentation = string[/\A\s*/]
  string.strip.gsub(/^#{indentation}/, "")
end

files = {
  "Capfile" => unindent(<<-FILE),
    require 'railsless-deploy'          # gem install railsless-deploy
    require 'didi/recipes/didi.rb'      # gem install capistrano-didi
    load 'config/deploy'
    require 'capistrano/ext/multistage' # gem install capistrano
  FILE

  "config/deploy.rb" => 'set :default_stage, "staging"
set :stages, %w(staging production)
set :application, "your_application_name"
set :repository,  "your_repository_location_here"
set :drupal_path, "drupal" # change this to your drupal folder
',
  "config/deploy/staging.rb" => 'set :user, "ssh_user_name"
server "server.example.com", :app, :web, :db, :primary => true

set :deploy_to, "the_path_on_the_remote_server"
set :branch, "master"

set :db_type, "mysql"
set :db_name, "database_name"
set :db_username, "database_user_name"
set :db_password, "database_password"
set :db_prefix, "database_prefix"

set :profile, "minimal"
set :domain, "default"
set :site, "apache_vhost"
set :sitemail, "drupal_site_email_address"
set :adminpass, "drupal_admin_pass"

set :baseline, "drupal_feature_to_activate_after_fresh_install"
',
"config/sql/staging.sql" => <<scrub
--
-- Scrub important information from a Drupal database.
--

-- Remove all email addresses.
UPDATE users SET mail=CONCAT('user', uid, '@example.com'), init=CONCAT('user', uid, '@example.com') WHERE uid != 0;

-- Example: Disable a module by setting its system.status value to 0.
-- UPDATE system SET status = 0 WHERE name = 'securepages';

-- Example: Update or delete variables via the variable table.
-- DELETE FROM variable WHERE name='secret_key';
-- Note that to update variables the value must be a properly serialized php array.
-- UPDATE variable SET value='s:24:"http://test.gateway.com/";' WHERE name='payment_gateway';

-- IMPORTANT: If you change the variable table, clear the variables cache.
-- DELETE FROM cache WHERE cid = 'variables';

-- Scrub url aliases for non-admins since these also reveal names
-- Add the IGNORE keyword, since a user may have multiple aliases, and without
-- this keyword the attempt to store duplicate dst values causes the query to fail.
-- UPDATE IGNORE url_alias SET dst = CONCAT('users/', REPLACE(src,'/', '')) WHERE src IN (SELECT CONCAT('user/', u.uid) FROM users u WHERE u.uid NOT IN (SELECT uid FROM users_roles WHERE rid=3) AND u.uid > 0);

-- don't leave e-mail addresses, etc in comments table.
-- UPDATE comments SET name='Anonymous', mail='', homepage='http://example.com' WHERE uid=0;

-- Scrub webform submissions.
-- UPDATE webform_submitted_data set data='*scrubbed*';

-- remove sensitive customer data from custom module
-- TRUNCATE custom_customer_lead_data;

-- USER PASSWORDS
-- These statements assume you want to preserve real passwords for developers. Change 'rid=3' to the
-- developer or test role you want to preserve.

-- DRUPAL 6
-- Remove passwords unless users have 'developer role'
-- UPDATE users SET pass=md5('devpassword') WHERE uid IN (SELECT uid FROM users_roles WHERE rid=3) AND uid > 0;

-- Admin user should not be same but not really well known
-- UPDATE users SET pass = MD5('supersecret!') WHERE uid = 1;

-- DRUPAL 7
-- Drupal 7 requires sites to generate a hashed password specific to their site. A script in the
-- docroot/scripts directory is provided for doing this. From your docroot run the following:
--
--    scripts/password-hash.sh password
--
-- this will generate a hash for the password "password". In the following statements replace
-- $REPLACE THIS$ with your generated hash.

-- Remove passwords unless users have 'developer role'
-- UPDATE users SET pass='$REPLACE THIS$' WHERE uid IN (SELECT uid FROM users_roles WHERE rid=3) AND uid > 0;

-- Admin user should not be same but not really well known
-- UPDATE users SET pass='$REPLACE THIS$' WHERE uid = 1;

-- TRUNCATE accesslog;
-- TRUNCATE access;
-- TRUNCATE cache;
-- TRUNCATE cache_filter;
-- TRUNCATE cache_menu;
-- TRUNCATE cache_page;
-- TRUNCATE cache_views;
-- TRUNCATE cache_views_data;
-- TRUNCATE devel_queries;
-- TRUNCATE devel_times;
-- TRUNCATE flood;
-- TRUNCATE history;
-- TRUNCATE search_dataset;
-- TRUNCATE search_index;
-- TRUNCATE search_total;
-- TRUNCATE sessions;
-- TRUNCATE watchdog;
scrub
}

base = ARGV.shift
files.each do |file, content|
  file = File.join(base, file)
  if File.exists?(file)
    warn "[skip] '#{file}' already exists"
  elsif File.exists?(file.downcase)
    warn "[skip] '#{file.downcase}' exists, which could conflict with `#{file}'"
  else
    unless File.exists?(File.dirname(file))
      puts "[add] making directory '#{File.dirname(file)}'"
      FileUtils.mkdir_p(File.dirname(file))
    end
    puts "[add] writing '#{file}'"
    File.open(file, "w") { |f| f.write(content) }
  end
end

puts "[done] didified!"

unless File.exists?("#{base}/drupal")
  puts ""
  puts 'WARNING: drupal folder not found! install drupal in folder "drupal" or change the :drupal_path variable.'
  puts 'WARNING: for example: drush dl drupal --drupal-project-rename="drupal"'
end

puts ""
puts 'After editing your config files just run: "didi deploy:cold" to set things up.'
puts 'After that you can do incremental updates with: "didi deploy"'
puts 'Or "didi deploy:rebuild" to setup from scratch'

